'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

(function () {
  "use strict";
  var sel = function sel(a) {
    var b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;
    return b.querySelector(a);
  };var all = function all(a) {
    var b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;
    return [].concat(_toConsumableArray(b.querySelectorAll(a)));
  };var addEvt = function addEvt(a, b, c) {
    if (Array.isArray(a) || typeof a === 'string') {
      if (!Array.isArray(a)) {
        a = all(a);
      };var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = a[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var e = _step.value;
          e.addEventListener(b, c);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    } else {
      a.addEventListener(b, c);
    }
  };var loaded = function loaded(a) {
    addEvt(document, 'DOMContentLoaded', a);
  };window.sel = sel;window.all = all;window.addEvt = addEvt;window.loaded = loaded;
})();